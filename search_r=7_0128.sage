
q = 13

FF.<w> = GF(q, "w")


def update_selected_points(selected_points):
    #print(selected_points)
    num = 6
    i = num
    while True:
        if selected_points[i] == q:
            selected_points[i] = 0
            i -= 1
            if i == -1:
                return False
            continue
        else:
            selected_points[i] += 1
            if len(set(selected_points)) == num+1:
                return True
            else:
                i = num
                continue

def index2point(index):
    if index == 0:
        return vector(FF, [0, 1])
    if index == 1:
        return vector(FF, [1, 0])
    # return vector(FF, [1, 2^(index-2)])
    return vector(FF, [1, w^(index-2)])

index = [0, 0, 0, 0, 0, 0, 0]

while update_selected_points(index):
    print(index)
    P1 = index2point(index[0])
    P2 = index2point(index[1])
    P3 = index2point(index[2])
    P4 = index2point(index[3])
    P5 = index2point(index[4])
    P6 = index2point(index[5])
    P7 = index2point(index[6])
    print(P1,P2,P3,P4)
        # linear_equation = matrix(FF,
    #                          [[P1[0], -P2[0], 0, 0, 0, P3[0], 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[1], -P2[1], 0, 0, 0, P3[1], 0, 0, 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[0], 0, -P3[0], 0, 0, 0, P4[0], 0, 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[1], 0, -P3[1], 0, 0, 0, P4[1], 0, 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[0], 0, 0, -P4[0], 0, 0, 0, P5[0], 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[1], 0, 0, -P4[1], 0, 0, 0, P5[1], 0, 0, 0, 0, 0, 0, 0],
    #                           [P1[0], 0, 0, 0, -P5[0], 0, 0, 0, P2[0], 0, 0, 0, 0, 0, 0],
    #                           [P1[1], 0, 0, 0, -P5[1], 0, 0, 0, P2[1], 0, 0, 0, 0, 0, 0],
    #                           [0, P2[0], -P3[0], 0, 0, 0, 0, 0, 0, P5[0], 0, 0, 0, 0, 0],
    #                           [0, P2[1], -P3[1], 0, 0, 0, 0, 0, 0, P5[1], 0, 0, 0, 0, 0],
    #                           [0, P2[0], 0, -P4[0], 0, 0, 0, 0, 0, 0, P1[0], 0, 0, 0, 0],
    #                           [0, P2[1], 0, -P4[1], 0, 0, 0, 0, 0, 0, P1[1], 0, 0, 0, 0],
    #                           [0, P2[0], 0, 0, -P5[0], 0, 0, 0, 0, 0, 0, P4[0], 0, 0, 0],
    #                           [0, P2[1], 0, 0, -P5[1], 0, 0, 0, 0, 0, 0, P4[1], 0, 0, 0],
    #                           [0, 0, P3[0], -P4[0], 0, 0, 0, 0, 0, 0, 0, 0, P2[0], 0, 0],
    #                           [0, 0, P3[1], -P4[1], 0, 0, 0, 0, 0, 0, 0, 0, P2[1], 0, 0],
    #                           [0, 0, P3[0], 0, -P5[0], 0, 0, 0, 0, 0, 0, 0, 0, P1[0], 0],
    #                           [0, 0, P3[1], 0, -P5[1], 0, 0, 0, 0, 0, 0, 0, 0, P1[1], 0],
    #                           [0, 0, 0, P4[0], -P5[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, P3[0]],
    #                           [0, 0, 0, P4[1], -P5[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, P3[1]]])
    linear_equation = matrix(FF,
                             [[P1[0], -P2[0], 0, 0, 0, 0, 0, P5[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], -P2[1], 0, 0, 0, 0, 0, P5[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[0], 0, -P3[0], 0, 0, 0, 0, 0, P2[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], 0, -P3[1], 0, 0, 0, 0, 0, P2[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[0], 0, 0, -P4[0], 0, 0, 0, 0, 0, P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], 0, 0, -P4[1], 0, 0, 0, 0, 0, P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[0], 0, 0, 0, -P5[0], 0, 0, 0, 0, 0, P3[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], 0, 0, 0, -P5[1], 0, 0, 0, 0, 0, P3[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[0], 0, 0, 0, 0, -P6[0], 0, 0, 0, 0, 0, P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], 0, 0, 0, 0, -P6[1], 0, 0, 0, 0, 0, P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[0], 0, 0, 0, 0, 0, -P7[0], 0, 0, 0, 0, 0, P4[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [P1[1], 0, 0, 0, 0, 0, -P7[1], 0, 0, 0, 0, 0, P4[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[0], -P3[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[1], -P3[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[0], 0, -P4[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P3[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[1], 0, -P4[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P3[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[0], 0, 0, -P5[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[1], 0, 0, -P5[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[0], 0, 0, 0, -P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P4[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[1], 0, 0, 0, -P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P4[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[0], 0, 0, 0, 0, -P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[0], 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, P2[1], 0, 0, 0, 0, -P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[1], 0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[0], -P4[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P7[0], 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[1], -P4[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P7[1], 0, 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[0], 0, -P5[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P4[0], 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[1], 0, -P5[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P4[1], 0, 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[0], 0, 0, -P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[0], 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[1], 0, 0, -P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[1], 0, 0, 0, 0, 0, 0],
                              [0, 0, P3[0], 0, 0, 0, -P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P5[0], 0, 0, 0, 0, 0],
                              [0, 0, P3[1], 0, 0, 0, -P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P5[1], 0, 0, 0, 0, 0],
                              [0, 0, 0, P4[0], -P5[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[0], 0, 0, 0, 0],
                              [0, 0, 0, P4[1], -P5[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P1[1], 0, 0, 0, 0],
                              [0, 0, 0, P4[0], 0, -P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P5[0], 0, 0, 0],
                              [0, 0, 0, P4[1], 0, -P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P5[1], 0, 0, 0],
                              [0, 0, 0, P4[0], 0, 0, -P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P2[0], 0, 0],
                              [0, 0, 0, P4[1], 0, 0, -P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P2[1], 0, 0],
                              [0, 0, 0, 0, P5[0], -P6[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P2[0], 0],
                              [0, 0, 0, 0, P5[1], -P6[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P2[1], 0],
                              [0, 0, 0, 0, P5[0], 0, -P7[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P6[0]],
                              [0, 0, 0, 0, P5[1], 0, -P7[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P6[1]]])
    kernel = linear_equation.transpose().kernel()
    if kernel.dimension() != 0:
        print('kernel.dimension() != 0')
        print(kernel)
        # C = LinearCode(kernel)
        # wd = C.weight_distribution()
        # if wd[10] != 0:
        #     print('wd[10] != 0')
        #     print(linear_equation)
        #     print(kernel)
        #     print(wd)
        #     kernel = kernel.basis()
        #     vec = kernel[0]
        #     for i in range(1, 4):
        #         vec += kernel[i]
        #     print(vec)
    print()
    # print(index)
    # H2 = []
    # for i in range(4):
    #     H2.append(0)
    #     for j in range(4):
    #         if index[i*4+j]==0:
    #             H2.append(0)
    #         else:
    #             H2.append(w^(index[i*4+j]))
    # # print(H2)
    # H = H1 + H2
    # H = matrix(FF, 4, 10, H)
    # # print(H)
    # C = LinearCode(H)
    # C = C.dual_code()
    # w_d = C.weight_distribution()
    # if w_d[1]==0 and w_d[2]==0 and w_d[3]==0:
    #     print("d=4")
    #     if w_d[4]==80:
    #         print('mrc')
    #     print(H)
    #     print('\n')

print('finish')


